// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------



/// <remarks/>
/// <remarks>
///ChronojumpServer
///</remarks>
[System.Web.Services.WebServiceBinding(Name="ChronojumpServerSoap", Namespace="http://localhost:8080/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(Session))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(EventType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(Event))]
public class ChronojumpServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback ConnectDatabaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback DisConnectDatabaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback StatsOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadSessionOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateSessionOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadSportOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadJumpTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadJumpRjTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadRunTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadRunIntervalTypeOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadPersonOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadPersonSessionIfNeededOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadPingOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadEvaluatorOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadJumpOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadJumpRjOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadRunOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadRunIOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadRTOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadPulseOperationCompleted;
    
    private System.Threading.SendOrPostCallback ListDirectoryOperationCompleted;
    
    public ChronojumpServer() {
        this.Url = "http://localhost:8080/chronojumpServer.asmx";
    }
    
    private event ConnectDatabaseCompletedEventHandler ConnectDatabaseCompleted;
    
    private event DisConnectDatabaseCompletedEventHandler DisConnectDatabaseCompleted;
    
    private event StatsCompletedEventHandler StatsCompleted;
    
    private event UploadSessionCompletedEventHandler UploadSessionCompleted;
    
    private event UpdateSessionCompletedEventHandler UpdateSessionCompleted;
    
    private event UploadSportCompletedEventHandler UploadSportCompleted;
    
    private event UploadJumpTypeCompletedEventHandler UploadJumpTypeCompleted;
    
    private event UploadJumpRjTypeCompletedEventHandler UploadJumpRjTypeCompleted;
    
    private event UploadRunTypeCompletedEventHandler UploadRunTypeCompleted;
    
    private event UploadRunIntervalTypeCompletedEventHandler UploadRunIntervalTypeCompleted;
    
    private event UploadPersonCompletedEventHandler UploadPersonCompleted;
    
    private event UploadPersonSessionIfNeededCompletedEventHandler UploadPersonSessionIfNeededCompleted;
    
    private event UploadPingCompletedEventHandler UploadPingCompleted;
    
    private event UploadEvaluatorCompletedEventHandler UploadEvaluatorCompleted;
    
    private event UploadJumpCompletedEventHandler UploadJumpCompleted;
    
    private event UploadJumpRjCompletedEventHandler UploadJumpRjCompleted;
    
    private event UploadRunCompletedEventHandler UploadRunCompleted;
    
    private event UploadRunICompletedEventHandler UploadRunICompleted;
    
    private event UploadRTCompletedEventHandler UploadRTCompleted;
    
    private event UploadPulseCompletedEventHandler UploadPulseCompleted;
    
    private event ListDirectoryCompletedEventHandler ListDirectoryCompleted;
    
    /// <remarks>
///Conecta BBDD
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/ConnectDatabase", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string ConnectDatabase() {
        object[] results = this.Invoke("ConnectDatabase", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginConnectDatabase(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ConnectDatabase", new object[0], callback, asyncState);
    }
    
    public string EndConnectDatabase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void ConnectDatabaseAsync() {
        this.ConnectDatabaseAsync(null);
    }
    
    public void ConnectDatabaseAsync(object userState) {
        if ((this.ConnectDatabaseOperationCompleted == null)) {
            this.ConnectDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectDatabaseCompleted);
        }
        this.InvokeAsync("ConnectDatabase", new object[0], this.ConnectDatabaseOperationCompleted, userState);
    }
    
    private void OnConnectDatabaseCompleted(object arg) {
        if ((this.ConnectDatabaseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ConnectDatabaseCompleted(this, new ConnectDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Desconecta BBDD
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/DisConnectDatabase", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string DisConnectDatabase() {
        object[] results = this.Invoke("DisConnectDatabase", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginDisConnectDatabase(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DisConnectDatabase", new object[0], callback, asyncState);
    }
    
    public string EndDisConnectDatabase(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void DisConnectDatabaseAsync() {
        this.DisConnectDatabaseAsync(null);
    }
    
    public void DisConnectDatabaseAsync(object userState) {
        if ((this.DisConnectDatabaseOperationCompleted == null)) {
            this.DisConnectDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisConnectDatabaseCompleted);
        }
        this.InvokeAsync("DisConnectDatabase", new object[0], this.DisConnectDatabaseOperationCompleted, userState);
    }
    
    private void OnDisConnectDatabaseCompleted(object arg) {
        if ((this.DisConnectDatabaseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DisConnectDatabaseCompleted(this, new DisConnectDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Stats
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/Stats", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string Stats() {
        object[] results = this.Invoke("Stats", new object[0]);
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginStats(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Stats", new object[0], callback, asyncState);
    }
    
    public string EndStats(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void StatsAsync() {
        this.StatsAsync(null);
    }
    
    public void StatsAsync(object userState) {
        if ((this.StatsOperationCompleted == null)) {
            this.StatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStatsCompleted);
        }
        this.InvokeAsync("Stats", new object[0], this.StatsOperationCompleted, userState);
    }
    
    private void OnStatsCompleted(object arg) {
        if ((this.StatsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StatsCompleted(this, new StatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a session
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadSession", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadSession(ServerSession mySession) {
        object[] results = this.Invoke("UploadSession", new object[] {
                    mySession});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadSession(ServerSession mySession, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadSession", new object[] {
                    mySession}, callback, asyncState);
    }
    
    public int EndUploadSession(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadSessionAsync(ServerSession mySession) {
        this.UploadSessionAsync(mySession, null);
    }
    
    public void UploadSessionAsync(ServerSession mySession, object userState) {
        if ((this.UploadSessionOperationCompleted == null)) {
            this.UploadSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSessionCompleted);
        }
        this.InvokeAsync("UploadSession", new object[] {
                    mySession}, this.UploadSessionOperationCompleted, userState);
    }
    
    private void OnUploadSessionCompleted(object arg) {
        if ((this.UploadSessionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadSessionCompleted(this, new UploadSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Update session uploadingState
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UpdateSession", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UpdateSession(int sessionID, int state) {
        object[] results = this.Invoke("UpdateSession", new object[] {
                    sessionID,
                    state});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUpdateSession(int sessionID, int state, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSession", new object[] {
                    sessionID,
                    state}, callback, asyncState);
    }
    
    public int EndUpdateSession(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UpdateSessionAsync(int sessionID, int state) {
        this.UpdateSessionAsync(sessionID, state, null);
    }
    
    public void UpdateSessionAsync(int sessionID, int state, object userState) {
        if ((this.UpdateSessionOperationCompleted == null)) {
            this.UpdateSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSessionCompleted);
        }
        this.InvokeAsync("UpdateSession", new object[] {
                    sessionID,
                    state}, this.UpdateSessionOperationCompleted, userState);
    }
    
    private void OnUpdateSessionCompleted(object arg) {
        if ((this.UpdateSessionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateSessionCompleted(this, new UpdateSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload an sport (user defined)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadSport", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadSport(Sport mySport) {
        object[] results = this.Invoke("UploadSport", new object[] {
                    mySport});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadSport(Sport mySport, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadSport", new object[] {
                    mySport}, callback, asyncState);
    }
    
    public int EndUploadSport(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadSportAsync(Sport mySport) {
        this.UploadSportAsync(mySport, null);
    }
    
    public void UploadSportAsync(Sport mySport, object userState) {
        if ((this.UploadSportOperationCompleted == null)) {
            this.UploadSportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSportCompleted);
        }
        this.InvokeAsync("UploadSport", new object[] {
                    mySport}, this.UploadSportOperationCompleted, userState);
    }
    
    private void OnUploadSportCompleted(object arg) {
        if ((this.UploadSportCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadSportCompleted(this, new UploadSportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a jump type (user defined)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadJumpType", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string UploadJumpType(JumpType type, int evalSID) {
        object[] results = this.Invoke("UploadJumpType", new object[] {
                    type,
                    evalSID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadJumpType(JumpType type, int evalSID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadJumpType", new object[] {
                    type,
                    evalSID}, callback, asyncState);
    }
    
    public string EndUploadJumpType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void UploadJumpTypeAsync(JumpType type, int evalSID) {
        this.UploadJumpTypeAsync(type, evalSID, null);
    }
    
    public void UploadJumpTypeAsync(JumpType type, int evalSID, object userState) {
        if ((this.UploadJumpTypeOperationCompleted == null)) {
            this.UploadJumpTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadJumpTypeCompleted);
        }
        this.InvokeAsync("UploadJumpType", new object[] {
                    type,
                    evalSID}, this.UploadJumpTypeOperationCompleted, userState);
    }
    
    private void OnUploadJumpTypeCompleted(object arg) {
        if ((this.UploadJumpTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadJumpTypeCompleted(this, new UploadJumpTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a jumpRj type (user defined)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadJumpRjType", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string UploadJumpRjType(JumpType type, int evalSID) {
        object[] results = this.Invoke("UploadJumpRjType", new object[] {
                    type,
                    evalSID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadJumpRjType(JumpType type, int evalSID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadJumpRjType", new object[] {
                    type,
                    evalSID}, callback, asyncState);
    }
    
    public string EndUploadJumpRjType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void UploadJumpRjTypeAsync(JumpType type, int evalSID) {
        this.UploadJumpRjTypeAsync(type, evalSID, null);
    }
    
    public void UploadJumpRjTypeAsync(JumpType type, int evalSID, object userState) {
        if ((this.UploadJumpRjTypeOperationCompleted == null)) {
            this.UploadJumpRjTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadJumpRjTypeCompleted);
        }
        this.InvokeAsync("UploadJumpRjType", new object[] {
                    type,
                    evalSID}, this.UploadJumpRjTypeOperationCompleted, userState);
    }
    
    private void OnUploadJumpRjTypeCompleted(object arg) {
        if ((this.UploadJumpRjTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadJumpRjTypeCompleted(this, new UploadJumpRjTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a run type (user defined)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadRunType", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string UploadRunType(RunType type, int evalSID) {
        object[] results = this.Invoke("UploadRunType", new object[] {
                    type,
                    evalSID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadRunType(RunType type, int evalSID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadRunType", new object[] {
                    type,
                    evalSID}, callback, asyncState);
    }
    
    public string EndUploadRunType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void UploadRunTypeAsync(RunType type, int evalSID) {
        this.UploadRunTypeAsync(type, evalSID, null);
    }
    
    public void UploadRunTypeAsync(RunType type, int evalSID, object userState) {
        if ((this.UploadRunTypeOperationCompleted == null)) {
            this.UploadRunTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRunTypeCompleted);
        }
        this.InvokeAsync("UploadRunType", new object[] {
                    type,
                    evalSID}, this.UploadRunTypeOperationCompleted, userState);
    }
    
    private void OnUploadRunTypeCompleted(object arg) {
        if ((this.UploadRunTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadRunTypeCompleted(this, new UploadRunTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a run interval type (user defined)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadRunIntervalType", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string UploadRunIntervalType(RunType type, int evalSID) {
        object[] results = this.Invoke("UploadRunIntervalType", new object[] {
                    type,
                    evalSID});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadRunIntervalType(RunType type, int evalSID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadRunIntervalType", new object[] {
                    type,
                    evalSID}, callback, asyncState);
    }
    
    public string EndUploadRunIntervalType(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void UploadRunIntervalTypeAsync(RunType type, int evalSID) {
        this.UploadRunIntervalTypeAsync(type, evalSID, null);
    }
    
    public void UploadRunIntervalTypeAsync(RunType type, int evalSID, object userState) {
        if ((this.UploadRunIntervalTypeOperationCompleted == null)) {
            this.UploadRunIntervalTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRunIntervalTypeCompleted);
        }
        this.InvokeAsync("UploadRunIntervalType", new object[] {
                    type,
                    evalSID}, this.UploadRunIntervalTypeOperationCompleted, userState);
    }
    
    private void OnUploadRunIntervalTypeCompleted(object arg) {
        if ((this.UploadRunIntervalTypeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadRunIntervalTypeCompleted(this, new UploadRunIntervalTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a person
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadPerson", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadPerson(Person myPerson, int sessionID) {
        object[] results = this.Invoke("UploadPerson", new object[] {
                    myPerson,
                    sessionID});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadPerson(Person myPerson, int sessionID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadPerson", new object[] {
                    myPerson,
                    sessionID}, callback, asyncState);
    }
    
    public int EndUploadPerson(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadPersonAsync(Person myPerson, int sessionID) {
        this.UploadPersonAsync(myPerson, sessionID, null);
    }
    
    public void UploadPersonAsync(Person myPerson, int sessionID, object userState) {
        if ((this.UploadPersonOperationCompleted == null)) {
            this.UploadPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPersonCompleted);
        }
        this.InvokeAsync("UploadPerson", new object[] {
                    myPerson,
                    sessionID}, this.UploadPersonOperationCompleted, userState);
    }
    
    private void OnUploadPersonCompleted(object arg) {
        if ((this.UploadPersonCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadPersonCompleted(this, new UploadPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload person session if needed
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadPersonSessionIfNeeded", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadPersonSessionIfNeeded(int personServerID, int sessionServerID, int weight) {
        object[] results = this.Invoke("UploadPersonSessionIfNeeded", new object[] {
                    personServerID,
                    sessionServerID,
                    weight});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadPersonSessionIfNeeded(int personServerID, int sessionServerID, int weight, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadPersonSessionIfNeeded", new object[] {
                    personServerID,
                    sessionServerID,
                    weight}, callback, asyncState);
    }
    
    public int EndUploadPersonSessionIfNeeded(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadPersonSessionIfNeededAsync(int personServerID, int sessionServerID, int weight) {
        this.UploadPersonSessionIfNeededAsync(personServerID, sessionServerID, weight, null);
    }
    
    public void UploadPersonSessionIfNeededAsync(int personServerID, int sessionServerID, int weight, object userState) {
        if ((this.UploadPersonSessionIfNeededOperationCompleted == null)) {
            this.UploadPersonSessionIfNeededOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPersonSessionIfNeededCompleted);
        }
        this.InvokeAsync("UploadPersonSessionIfNeeded", new object[] {
                    personServerID,
                    sessionServerID,
                    weight}, this.UploadPersonSessionIfNeededOperationCompleted, userState);
    }
    
    private void OnUploadPersonSessionIfNeededCompleted(object arg) {
        if ((this.UploadPersonSessionIfNeededCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadPersonSessionIfNeededCompleted(this, new UploadPersonSessionIfNeededCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a ping
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadPing", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadPing(ServerPing myPing, bool doInsertion) {
        object[] results = this.Invoke("UploadPing", new object[] {
                    myPing,
                    doInsertion});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadPing(ServerPing myPing, bool doInsertion, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadPing", new object[] {
                    myPing,
                    doInsertion}, callback, asyncState);
    }
    
    public int EndUploadPing(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadPingAsync(ServerPing myPing, bool doInsertion) {
        this.UploadPingAsync(myPing, doInsertion, null);
    }
    
    public void UploadPingAsync(ServerPing myPing, bool doInsertion, object userState) {
        if ((this.UploadPingOperationCompleted == null)) {
            this.UploadPingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPingCompleted);
        }
        this.InvokeAsync("UploadPing", new object[] {
                    myPing,
                    doInsertion}, this.UploadPingOperationCompleted, userState);
    }
    
    private void OnUploadPingCompleted(object arg) {
        if ((this.UploadPingCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadPingCompleted(this, new UploadPingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a evaluator
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadEvaluator", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadEvaluator(ServerEvaluator myEval) {
        object[] results = this.Invoke("UploadEvaluator", new object[] {
                    myEval});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadEvaluator(ServerEvaluator myEval, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadEvaluator", new object[] {
                    myEval}, callback, asyncState);
    }
    
    public int EndUploadEvaluator(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadEvaluatorAsync(ServerEvaluator myEval) {
        this.UploadEvaluatorAsync(myEval, null);
    }
    
    public void UploadEvaluatorAsync(ServerEvaluator myEval, object userState) {
        if ((this.UploadEvaluatorOperationCompleted == null)) {
            this.UploadEvaluatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadEvaluatorCompleted);
        }
        this.InvokeAsync("UploadEvaluator", new object[] {
                    myEval}, this.UploadEvaluatorOperationCompleted, userState);
    }
    
    private void OnUploadEvaluatorCompleted(object arg) {
        if ((this.UploadEvaluatorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadEvaluatorCompleted(this, new UploadEvaluatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a jump
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadJump", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadJump(Jump myTest) {
        object[] results = this.Invoke("UploadJump", new object[] {
                    myTest});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadJump(Jump myTest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadJump", new object[] {
                    myTest}, callback, asyncState);
    }
    
    public int EndUploadJump(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadJumpAsync(Jump myTest) {
        this.UploadJumpAsync(myTest, null);
    }
    
    public void UploadJumpAsync(Jump myTest, object userState) {
        if ((this.UploadJumpOperationCompleted == null)) {
            this.UploadJumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadJumpCompleted);
        }
        this.InvokeAsync("UploadJump", new object[] {
                    myTest}, this.UploadJumpOperationCompleted, userState);
    }
    
    private void OnUploadJumpCompleted(object arg) {
        if ((this.UploadJumpCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadJumpCompleted(this, new UploadJumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a jumpRj
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadJumpRj", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadJumpRj(JumpRj myTest) {
        object[] results = this.Invoke("UploadJumpRj", new object[] {
                    myTest});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadJumpRj(JumpRj myTest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadJumpRj", new object[] {
                    myTest}, callback, asyncState);
    }
    
    public int EndUploadJumpRj(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadJumpRjAsync(JumpRj myTest) {
        this.UploadJumpRjAsync(myTest, null);
    }
    
    public void UploadJumpRjAsync(JumpRj myTest, object userState) {
        if ((this.UploadJumpRjOperationCompleted == null)) {
            this.UploadJumpRjOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadJumpRjCompleted);
        }
        this.InvokeAsync("UploadJumpRj", new object[] {
                    myTest}, this.UploadJumpRjOperationCompleted, userState);
    }
    
    private void OnUploadJumpRjCompleted(object arg) {
        if ((this.UploadJumpRjCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadJumpRjCompleted(this, new UploadJumpRjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a run
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadRun", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadRun(Run myTest) {
        object[] results = this.Invoke("UploadRun", new object[] {
                    myTest});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadRun(Run myTest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadRun", new object[] {
                    myTest}, callback, asyncState);
    }
    
    public int EndUploadRun(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadRunAsync(Run myTest) {
        this.UploadRunAsync(myTest, null);
    }
    
    public void UploadRunAsync(Run myTest, object userState) {
        if ((this.UploadRunOperationCompleted == null)) {
            this.UploadRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRunCompleted);
        }
        this.InvokeAsync("UploadRun", new object[] {
                    myTest}, this.UploadRunOperationCompleted, userState);
    }
    
    private void OnUploadRunCompleted(object arg) {
        if ((this.UploadRunCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadRunCompleted(this, new UploadRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a run interval
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadRunI", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadRunI(RunInterval myTest) {
        object[] results = this.Invoke("UploadRunI", new object[] {
                    myTest});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadRunI(RunInterval myTest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadRunI", new object[] {
                    myTest}, callback, asyncState);
    }
    
    public int EndUploadRunI(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadRunIAsync(RunInterval myTest) {
        this.UploadRunIAsync(myTest, null);
    }
    
    public void UploadRunIAsync(RunInterval myTest, object userState) {
        if ((this.UploadRunIOperationCompleted == null)) {
            this.UploadRunIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRunICompleted);
        }
        this.InvokeAsync("UploadRunI", new object[] {
                    myTest}, this.UploadRunIOperationCompleted, userState);
    }
    
    private void OnUploadRunICompleted(object arg) {
        if ((this.UploadRunICompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadRunICompleted(this, new UploadRunICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a reaction time
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadRT", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadRT(ReactionTime myTest) {
        object[] results = this.Invoke("UploadRT", new object[] {
                    myTest});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadRT(ReactionTime myTest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadRT", new object[] {
                    myTest}, callback, asyncState);
    }
    
    public int EndUploadRT(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadRTAsync(ReactionTime myTest) {
        this.UploadRTAsync(myTest, null);
    }
    
    public void UploadRTAsync(ReactionTime myTest, object userState) {
        if ((this.UploadRTOperationCompleted == null)) {
            this.UploadRTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadRTCompleted);
        }
        this.InvokeAsync("UploadRT", new object[] {
                    myTest}, this.UploadRTOperationCompleted, userState);
    }
    
    private void OnUploadRTCompleted(object arg) {
        if ((this.UploadRTCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadRTCompleted(this, new UploadRTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Upload a pulse
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/UploadPulse", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public int UploadPulse(Pulse myTest) {
        object[] results = this.Invoke("UploadPulse", new object[] {
                    myTest});
        return ((int)(results[0]));
    }
    
    public System.IAsyncResult BeginUploadPulse(Pulse myTest, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UploadPulse", new object[] {
                    myTest}, callback, asyncState);
    }
    
    public int EndUploadPulse(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    public void UploadPulseAsync(Pulse myTest) {
        this.UploadPulseAsync(myTest, null);
    }
    
    public void UploadPulseAsync(Pulse myTest, object userState) {
        if ((this.UploadPulseOperationCompleted == null)) {
            this.UploadPulseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPulseCompleted);
        }
        this.InvokeAsync("UploadPulse", new object[] {
                    myTest}, this.UploadPulseOperationCompleted, userState);
    }
    
    private void OnUploadPulseCompleted(object arg) {
        if ((this.UploadPulseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadPulseCompleted(this, new UploadPulseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///List directory files (only as a sample)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8080/ListDirectory", RequestNamespace="http://localhost:8080/", ResponseNamespace="http://localhost:8080/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] ListDirectory(string path) {
        object[] results = this.Invoke("ListDirectory", new object[] {
                    path});
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginListDirectory(string path, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListDirectory", new object[] {
                    path}, callback, asyncState);
    }
    
    public string[] EndListDirectory(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void ListDirectoryAsync(string path) {
        this.ListDirectoryAsync(path, null);
    }
    
    public void ListDirectoryAsync(string path, object userState) {
        if ((this.ListDirectoryOperationCompleted == null)) {
            this.ListDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListDirectoryCompleted);
        }
        this.InvokeAsync("ListDirectory", new object[] {
                    path}, this.ListDirectoryOperationCompleted, userState);
    }
    
    private void OnListDirectoryCompleted(object arg) {
        if ((this.ListDirectoryCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ListDirectoryCompleted(this, new ListDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/*
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class ServerSession : Session {
    
    /// <remarks/>
    public int EvaluatorID;
    
    /// <remarks/>
    public string EvaluatorCJVersion;
    
    /// <remarks/>
    public string EvaluatorOS;
    
    /// <remarks/>
    public string UploadedDate;
    
    /// <remarks/>
    public int UploadingState;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ServerSession))]
public partial class Session {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Place;
    
    /// <remarks/>
    public string Date;
    
    /// <remarks/>
    public string Comments;
    
    /// <remarks/>
    public int ServerUniqueID;
    
    /// <remarks/>
    public int UniqueID;
    
    /// <remarks/>
    public int PersonsSportID;
    
    /// <remarks/>
    public int PersonsSpeciallityID;
    
    /// <remarks/>
    public int PersonsPractice;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class Sport {
    
    /// <remarks/>
    public int UniqueID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public bool UserDefined;
    
    /// <remarks/>
    public string GraphLink;
    
    /// <remarks/>
    public bool HasSpeciallities;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class JumpType : EventType {
    
    /// <remarks/>
    public bool StartIn;
    
    /// <remarks/>
    public bool HasWeight;
    
    /// <remarks/>
    public bool IsRepetitive;
    
    /// <remarks/>
    public bool JumpsLimited;
    
    /// <remarks/>
    public double FixedValue;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(JumpType))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RunType))]
public partial class EventType {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public bool IsPredefined;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class RunType : EventType {
    
    /// <remarks/>
    public double Distance;
    
    /// <remarks/>
    public bool HasIntervals;
    
    /// <remarks/>
    public bool TracksLimited;
    
    /// <remarks/>
    public int FixedValue;
    
    /// <remarks/>
    public bool Unlimited;
    
    /// <remarks/>
    public string DistancesString;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class Person {
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Sex;
    
    /// <remarks/>
    public string DateBorn;
    
    /// <remarks/>
    public int Height;
    
    /// <remarks/>
    public int Weight;
    
    /// <remarks/>
    public int SportID;
    
    /// <remarks/>
    public int SpeciallityID;
    
    /// <remarks/>
    public int Practice;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public int Race;
    
    /// <remarks/>
    public int CountryID;
    
    /// <remarks/>
    public int ServerUniqueID;
    
    /// <remarks/>
    public int UniqueID;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class ServerPing {
    
    /// <remarks/>
    public int UniqueID;
    
    /// <remarks/>
    public int EvaluatorID;
    
    /// <remarks/>
    public string CJVersion;
    
    /// <remarks/>
    public string OSVersion;
    
    /// <remarks/>
    public string IP;
    
    /// <remarks/>
    public string Date;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class ServerEvaluator {
    
    /// <remarks/>
    public int UniqueID;
    
    /// <remarks/>
    public string Name;
    
    /// <remarks/>
    public string Email;
    
    /// <remarks/>
    public string DateBorn;
    
    /// <remarks/>
    public int CountryID;
    
    /// <remarks/>
    public bool Confiable;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(JumpRj))]
public partial class Jump : Event {
    
    /// <remarks/>
    public double Tv;
    
    /// <remarks/>
    public double Tc;
    
    /// <remarks/>
    public int Fall;
    
    /// <remarks/>
    public double Weight;
    
    /// <remarks/>
    public double Angle;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(Jump))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(JumpRj))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(Run))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RunInterval))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(ReactionTime))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(Pulse))]
public partial class Event {
    
    /// <remarks/>
    public string Type;
    
    /// <remarks/>
    public string Description;
    
    /// <remarks/>
    public int UniqueID;
    
    /// <remarks/>
    public int SessionID;
    
    /// <remarks/>
    public int PersonID;
    
    /// <remarks/>
    public int Simulated;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class JumpRj : Jump {
    
    /// <remarks/>
    public string Limited;
    
    /// <remarks/>
    public string TvString;
    
    /// <remarks/>
    public string TcString;
    
    /// <remarks/>
    public int Jumps;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(RunInterval))]
public partial class Run : Event {
    
    /// <remarks/>
    public double Distance;
    
    /// <remarks/>
    public double Time;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class RunInterval : Run {
    
    /// <remarks/>
    public string IntervalTimesString;
    
    /// <remarks/>
    public double DistanceInterval;
    
    /// <remarks/>
    public double DistanceTotal;
    
    /// <remarks/>
    public double TimeTotal;
    
    /// <remarks/>
    public double Tracks;
    
    /// <remarks/>
    public string Limited;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class ReactionTime : Event {
    
    /// <remarks/>
    public double Time;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost:8080/")]
public partial class Pulse : Event {
    
    /// <remarks/>
    public double FixedPulse;
    
    /// <remarks/>
    public string TimesString;
}
*/

public class ConnectDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ConnectDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void ConnectDatabaseCompletedEventHandler(object sender, ConnectDatabaseCompletedEventArgs args);

public class DisConnectDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DisConnectDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void DisConnectDatabaseCompletedEventHandler(object sender, DisConnectDatabaseCompletedEventArgs args);

public class StatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal StatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void StatsCompletedEventHandler(object sender, StatsCompletedEventArgs args);

public class UploadSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadSessionCompletedEventHandler(object sender, UploadSessionCompletedEventArgs args);

public class UpdateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UpdateSessionCompletedEventHandler(object sender, UpdateSessionCompletedEventArgs args);

public class UploadSportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadSportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadSportCompletedEventHandler(object sender, UploadSportCompletedEventArgs args);

public class UploadJumpTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadJumpTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void UploadJumpTypeCompletedEventHandler(object sender, UploadJumpTypeCompletedEventArgs args);

public class UploadJumpRjTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadJumpRjTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void UploadJumpRjTypeCompletedEventHandler(object sender, UploadJumpRjTypeCompletedEventArgs args);

public class UploadRunTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadRunTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void UploadRunTypeCompletedEventHandler(object sender, UploadRunTypeCompletedEventArgs args);

public class UploadRunIntervalTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadRunIntervalTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void UploadRunIntervalTypeCompletedEventHandler(object sender, UploadRunIntervalTypeCompletedEventArgs args);

public class UploadPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadPersonCompletedEventHandler(object sender, UploadPersonCompletedEventArgs args);

public class UploadPersonSessionIfNeededCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadPersonSessionIfNeededCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadPersonSessionIfNeededCompletedEventHandler(object sender, UploadPersonSessionIfNeededCompletedEventArgs args);

public class UploadPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadPingCompletedEventHandler(object sender, UploadPingCompletedEventArgs args);

public class UploadEvaluatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadEvaluatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadEvaluatorCompletedEventHandler(object sender, UploadEvaluatorCompletedEventArgs args);

public class UploadJumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadJumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadJumpCompletedEventHandler(object sender, UploadJumpCompletedEventArgs args);

public class UploadJumpRjCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadJumpRjCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadJumpRjCompletedEventHandler(object sender, UploadJumpRjCompletedEventArgs args);

public class UploadRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadRunCompletedEventHandler(object sender, UploadRunCompletedEventArgs args);

public class UploadRunICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadRunICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadRunICompletedEventHandler(object sender, UploadRunICompletedEventArgs args);

public class UploadRTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadRTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadRTCompletedEventHandler(object sender, UploadRTCompletedEventArgs args);

public class UploadPulseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadPulseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

public delegate void UploadPulseCompletedEventHandler(object sender, UploadPulseCompletedEventArgs args);

public class ListDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ListDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void ListDirectoryCompletedEventHandler(object sender, ListDirectoryCompletedEventArgs args);

